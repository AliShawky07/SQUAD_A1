
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000478  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000478  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ee  00000000  00000000  00000658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fc  00000000  00000000  00001846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000764  00000000  00000000  00002142  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000028a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050c  00000000  00000000  00002a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009cf  00000000  00000000  00002f14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000038e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e7       	ldi	r30, 0x78	; 120
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 3a 02 	jmp	0x474	; 0x474 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
	
//uint8 VALUE = 0;
PORT_Init();
  82:	0e 94 b6 01 	call	0x36c	; 0x36c <PORT_Init>
LCD_Init();
  86:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_Init>
LCD_WRITE_STRING("TELBO");
  8a:	82 e7       	ldi	r24, 0x72	; 114
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 1c 01 	call	0x238	; 0x238 <LCD_WRITE_STRING>
  92:	ff cf       	rjmp	.-2      	; 0x92 <main+0x10>

00000094 <LCD_WRITE_COMMAND>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WRITE_COMMAND(uint8 cmd)
{
  94:	cf 93       	push	r28
  96:	c8 2f       	mov	r28, r24
	uint8 OLD_VALUE = 0 , NEW_VALUE = 0;
	DIO_WRITE_CHANNEL(LCD_RS_PIN , PIN_LOW);
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_LOW);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	//highest
	/*DIO_READ_OUTPUT_PORT (LCD_D4_PIN , &OLD_VALUE);
	NEW_VALUE = ((cmd >> 1) & DATA_MASK) | (OLD_VALUE & DATA_PORT_MASK);
	DIO_WRITE_PORT(LCD_D4_PIN , NEW_VALUE);
	*/
	DIO_WRITE_CHANNEL(LCD_D4_PIN , GET_BIT(cmd , 4));
  a8:	c4 fb       	bst	r28, 4
  aa:	66 27       	eor	r22, r22
  ac:	60 f9       	bld	r22, 0
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D5_PIN , GET_BIT(cmd , 5));
  b4:	c5 fb       	bst	r28, 5
  b6:	66 27       	eor	r22, r22
  b8:	60 f9       	bld	r22, 0
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D6_PIN , GET_BIT(cmd , 6));
  c0:	c6 fb       	bst	r28, 6
  c2:	66 27       	eor	r22, r22
  c4:	60 f9       	bld	r22, 0
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D7_PIN , GET_BIT(cmd , 7));
  cc:	6c 2f       	mov	r22, r28
  ce:	66 1f       	adc	r22, r22
  d0:	66 27       	eor	r22, r22
  d2:	66 1f       	adc	r22, r22
  d4:	86 e0       	ldi	r24, 0x06	; 6
  d6:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_HIGH);
  da:	61 e0       	ldi	r22, 0x01	; 1
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	89 ef       	ldi	r24, 0xF9	; 249
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <LCD_WRITE_COMMAND+0x52>
  ea:	00 c0       	rjmp	.+0      	; 0xec <LCD_WRITE_COMMAND+0x58>
  ec:	00 00       	nop
	_delay_ms(1);
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_LOW);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	//lowest
	/*DIO_READ_OUTPUT_PORT (LCD_D4_PIN , &OLD_VALUE);
	NEW_VALUE = ((cmd << 3) & DATA_MASK) | (OLD_VALUE & DATA_PORT_MASK);
	DIO_WRITE_PORT(LCD_D4_PIN , NEW_VALUE);
	*/
	DIO_WRITE_CHANNEL(LCD_D4_PIN , GET_BIT(cmd , 0));
  f6:	6c 2f       	mov	r22, r28
  f8:	61 70       	andi	r22, 0x01	; 1
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D5_PIN , GET_BIT(cmd , 1));
 100:	c1 fb       	bst	r28, 1
 102:	66 27       	eor	r22, r22
 104:	60 f9       	bld	r22, 0
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D6_PIN , GET_BIT(cmd , 2));
 10c:	c2 fb       	bst	r28, 2
 10e:	66 27       	eor	r22, r22
 110:	60 f9       	bld	r22, 0
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D7_PIN , GET_BIT(cmd , 3));
 118:	c3 fb       	bst	r28, 3
 11a:	66 27       	eor	r22, r22
 11c:	60 f9       	bld	r22, 0
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_HIGH);
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
 12c:	89 ef       	ldi	r24, 0xF9	; 249
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <LCD_WRITE_COMMAND+0x9c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <LCD_WRITE_COMMAND+0xa2>
 136:	00 00       	nop
	_delay_ms(1);
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_LOW);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
 140:	81 ee       	ldi	r24, 0xE1	; 225
 142:	94 e0       	ldi	r25, 0x04	; 4
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_WRITE_COMMAND+0xb0>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_WRITE_COMMAND+0xb6>
 14a:	00 00       	nop
	
	_delay_ms(5);
	
#endif
}
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <LCD_Init>:
*******************************************************************************/
void LCD_Init(void)
{
	//#if (LCD_MODE == LCD_4BIT_MODE)

	LCD_WRITE_COMMAND(0X33);
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0X32);
 156:	82 e3       	ldi	r24, 0x32	; 50
 158:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0X28);
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_WRITE_COMMAND>
	
	LCD_WRITE_COMMAND(0X0E);
 162:	8e e0       	ldi	r24, 0x0E	; 14
 164:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_WRITE_COMMAND>
	//LCD_WRITE_COMMAND(0X0C);
	
	LCD_WRITE_COMMAND(0X01);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0X06);
 16e:	86 e0       	ldi	r24, 0x06	; 6
 170:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(0X02);
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	0e 94 4a 00 	call	0x94	; 0x94 <LCD_WRITE_COMMAND>
 17a:	08 95       	ret

0000017c <LCD_WRITE_CHAR>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WRITE_CHAR(uint8 cmd)
{
 17c:	cf 93       	push	r28
 17e:	c8 2f       	mov	r28, r24
	uint8 OLD_VALUE = 0 , NEW_VALUE = 0;
	DIO_WRITE_CHANNEL(LCD_RS_PIN , PIN_HIGH);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_LOW);
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	//highest
	/*DIO_READ_OUTPUT_PORT (LCD_D4_PIN , &OLD_VALUE);
	NEW_VALUE = ((chr >> 1) & DATA_MASK) | (OLD_VALUE & DATA_PORT_MASK);
	DIO_WRITE_PORT(LCD_D4_PIN , NEW_VALUE);
	*/
	DIO_WRITE_CHANNEL(LCD_D4_PIN , GET_BIT(cmd , 4));
 190:	c4 fb       	bst	r28, 4
 192:	66 27       	eor	r22, r22
 194:	60 f9       	bld	r22, 0
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D5_PIN , GET_BIT(cmd , 5));
 19c:	c5 fb       	bst	r28, 5
 19e:	66 27       	eor	r22, r22
 1a0:	60 f9       	bld	r22, 0
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D6_PIN , GET_BIT(cmd , 6));
 1a8:	c6 fb       	bst	r28, 6
 1aa:	66 27       	eor	r22, r22
 1ac:	60 f9       	bld	r22, 0
 1ae:	85 e0       	ldi	r24, 0x05	; 5
 1b0:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D7_PIN , GET_BIT(cmd , 7));
 1b4:	6c 2f       	mov	r22, r28
 1b6:	66 1f       	adc	r22, r22
 1b8:	66 27       	eor	r22, r22
 1ba:	66 1f       	adc	r22, r22
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_HIGH);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
 1ca:	89 ef       	ldi	r24, 0xF9	; 249
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_WRITE_CHAR+0x52>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_WRITE_CHAR+0x58>
 1d4:	00 00       	nop
	_delay_ms(1);
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_LOW);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	/*
	DIO_READ_OUTPUT_PORT (LCD_D4_PIN , &OLD_VALUE);
	NEW_VALUE = ((chr << 3) & DATA_MASK) | (OLD_VALUE & DATA_PORT_MASK);
	DIO_WRITE_PORT(LCD_D4_PIN , NEW_VALUE);
	*/
	DIO_WRITE_CHANNEL(LCD_D4_PIN , GET_BIT(cmd , 0));
 1de:	6c 2f       	mov	r22, r28
 1e0:	61 70       	andi	r22, 0x01	; 1
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D5_PIN , GET_BIT(cmd , 1));
 1e8:	c1 fb       	bst	r28, 1
 1ea:	66 27       	eor	r22, r22
 1ec:	60 f9       	bld	r22, 0
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D6_PIN , GET_BIT(cmd , 2));
 1f4:	c2 fb       	bst	r28, 2
 1f6:	66 27       	eor	r22, r22
 1f8:	60 f9       	bld	r22, 0
 1fa:	85 e0       	ldi	r24, 0x05	; 5
 1fc:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	DIO_WRITE_CHANNEL(LCD_D7_PIN , GET_BIT(cmd , 3));
 200:	c3 fb       	bst	r28, 3
 202:	66 27       	eor	r22, r22
 204:	60 f9       	bld	r22, 0
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
	
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_HIGH);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	82 e0       	ldi	r24, 0x02	; 2
 210:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
 214:	89 ef       	ldi	r24, 0xF9	; 249
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_WRITE_CHAR+0x9c>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_WRITE_CHAR+0xa2>
 21e:	00 00       	nop
	_delay_ms(1);
	DIO_WRITE_CHANNEL(LCD_E_PIN , PIN_LOW);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	82 e0       	ldi	r24, 0x02	; 2
 224:	0e 94 2f 01 	call	0x25e	; 0x25e <DIO_WRITE_CHANNEL>
 228:	81 ee       	ldi	r24, 0xE1	; 225
 22a:	94 e0       	ldi	r25, 0x04	; 4
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <LCD_WRITE_CHAR+0xb0>
 230:	00 c0       	rjmp	.+0      	; 0x232 <LCD_WRITE_CHAR+0xb6>
 232:	00 00       	nop
	
	_delay_ms(5);
	
#endif
}
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <LCD_WRITE_STRING>:
* \Parameters (out): None
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LCD_WRITE_STRING(uint8* chr)
{
 238:	0f 93       	push	r16
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	8c 01       	movw	r16, r24
	uint8 cnt = -1;
 240:	cf ef       	ldi	r28, 0xFF	; 255
	
	while(chr[cnt] != '\0')
 242:	03 c0       	rjmp	.+6      	; 0x24a <LCD_WRITE_STRING+0x12>
	{
		LCD_WRITE_CHAR(chr[cnt]);
 244:	0e 94 be 00 	call	0x17c	; 0x17c <LCD_WRITE_CHAR>
		cnt++;
 248:	cf 5f       	subi	r28, 0xFF	; 255
*******************************************************************************/
void LCD_WRITE_STRING(uint8* chr)
{
	uint8 cnt = -1;
	
	while(chr[cnt] != '\0')
 24a:	f8 01       	movw	r30, r16
 24c:	ec 0f       	add	r30, r28
 24e:	f1 1d       	adc	r31, r1
 250:	80 81       	ld	r24, Z
 252:	81 11       	cpse	r24, r1
 254:	f7 cf       	rjmp	.-18     	; 0x244 <LCD_WRITE_STRING+0xc>
	{
		LCD_WRITE_CHAR(chr[cnt]);
		cnt++;
	}
}
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <DIO_WRITE_CHANNEL>:
*                                    E_NOT_OK                                  
*******************************************************************************/
void DIO_WRITE_CHANNEL (uint8 PIN_NUM , uint8 PIN_VALUE)
{
	uint8 PORT = 0 , PIN = 0;
	PORT = PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
 25e:	98 2f       	mov	r25, r24
 260:	96 95       	lsr	r25
 262:	96 95       	lsr	r25
 264:	96 95       	lsr	r25
	PIN = PIN_NUM % NUMBER_OF_EACH_PORT_PINS ;
 266:	87 70       	andi	r24, 0x07	; 7
	
	switch(PIN_VALUE)
 268:	66 23       	and	r22, r22
 26a:	09 f4       	brne	.+2      	; 0x26e <DIO_WRITE_CHANNEL+0x10>
 26c:	3f c0       	rjmp	.+126    	; 0x2ec <DIO_WRITE_CHANNEL+0x8e>
 26e:	61 30       	cpi	r22, 0x01	; 1
 270:	09 f0       	breq	.+2      	; 0x274 <DIO_WRITE_CHANNEL+0x16>
 272:	7b c0       	rjmp	.+246    	; 0x36a <DIO_WRITE_CHANNEL+0x10c>
	{
		case PIN_HIGH:
		
		switch(PORT)
 274:	91 30       	cpi	r25, 0x01	; 1
 276:	99 f0       	breq	.+38     	; 0x29e <DIO_WRITE_CHANNEL+0x40>
 278:	28 f0       	brcs	.+10     	; 0x284 <DIO_WRITE_CHANNEL+0x26>
 27a:	92 30       	cpi	r25, 0x02	; 2
 27c:	e9 f0       	breq	.+58     	; 0x2b8 <DIO_WRITE_CHANNEL+0x5a>
 27e:	93 30       	cpi	r25, 0x03	; 3
 280:	41 f1       	breq	.+80     	; 0x2d2 <DIO_WRITE_CHANNEL+0x74>
 282:	08 95       	ret
		{
		case 0:
		SET_BIT (PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 284:	4b b3       	in	r20, 0x1b	; 27
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	b9 01       	movw	r22, r18
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_WRITE_CHANNEL+0x34>
 28e:	66 0f       	add	r22, r22
 290:	77 1f       	adc	r23, r23
 292:	8a 95       	dec	r24
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_WRITE_CHANNEL+0x30>
 296:	cb 01       	movw	r24, r22
 298:	84 2b       	or	r24, r20
 29a:	8b bb       	out	0x1b, r24	; 27
		break;
 29c:	08 95       	ret
		
		case 1:
		SET_BIT (PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 29e:	48 b3       	in	r20, 0x18	; 24
 2a0:	21 e0       	ldi	r18, 0x01	; 1
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	b9 01       	movw	r22, r18
 2a6:	02 c0       	rjmp	.+4      	; 0x2ac <DIO_WRITE_CHANNEL+0x4e>
 2a8:	66 0f       	add	r22, r22
 2aa:	77 1f       	adc	r23, r23
 2ac:	8a 95       	dec	r24
 2ae:	e2 f7       	brpl	.-8      	; 0x2a8 <DIO_WRITE_CHANNEL+0x4a>
 2b0:	cb 01       	movw	r24, r22
 2b2:	84 2b       	or	r24, r20
 2b4:	88 bb       	out	0x18, r24	; 24
		break;
 2b6:	08 95       	ret
		
		case 2:
		SET_BIT (PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 2b8:	45 b3       	in	r20, 0x15	; 21
 2ba:	21 e0       	ldi	r18, 0x01	; 1
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	b9 01       	movw	r22, r18
 2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_WRITE_CHANNEL+0x68>
 2c2:	66 0f       	add	r22, r22
 2c4:	77 1f       	adc	r23, r23
 2c6:	8a 95       	dec	r24
 2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_WRITE_CHANNEL+0x64>
 2ca:	cb 01       	movw	r24, r22
 2cc:	84 2b       	or	r24, r20
 2ce:	85 bb       	out	0x15, r24	; 21
		break;
 2d0:	08 95       	ret
		
		case 3:
		SET_BIT (PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 2d2:	42 b3       	in	r20, 0x12	; 18
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_WRITE_CHANNEL+0x82>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	8a 95       	dec	r24
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_WRITE_CHANNEL+0x7e>
 2e4:	cb 01       	movw	r24, r22
 2e6:	84 2b       	or	r24, r20
 2e8:	82 bb       	out	0x12, r24	; 18
		break;
 2ea:	08 95       	ret
		}
		break;
	
		case PIN_LOW:
		
		switch(PORT)
 2ec:	91 30       	cpi	r25, 0x01	; 1
 2ee:	a1 f0       	breq	.+40     	; 0x318 <DIO_WRITE_CHANNEL+0xba>
 2f0:	28 f0       	brcs	.+10     	; 0x2fc <DIO_WRITE_CHANNEL+0x9e>
 2f2:	92 30       	cpi	r25, 0x02	; 2
 2f4:	f9 f0       	breq	.+62     	; 0x334 <DIO_WRITE_CHANNEL+0xd6>
 2f6:	93 30       	cpi	r25, 0x03	; 3
 2f8:	59 f1       	breq	.+86     	; 0x350 <DIO_WRITE_CHANNEL+0xf2>
 2fa:	08 95       	ret
		{
		case 0:
		CLR_BIT (PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 2fc:	4b b3       	in	r20, 0x1b	; 27
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	b9 01       	movw	r22, r18
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_WRITE_CHANNEL+0xac>
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	8a 95       	dec	r24
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_WRITE_CHANNEL+0xa8>
 30e:	cb 01       	movw	r24, r22
 310:	80 95       	com	r24
 312:	84 23       	and	r24, r20
 314:	8b bb       	out	0x1b, r24	; 27
		break;
 316:	08 95       	ret
		
		case 1:
		CLR_BIT (PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 318:	48 b3       	in	r20, 0x18	; 24
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	b9 01       	movw	r22, r18
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_WRITE_CHANNEL+0xc8>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	8a 95       	dec	r24
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_WRITE_CHANNEL+0xc4>
 32a:	cb 01       	movw	r24, r22
 32c:	80 95       	com	r24
 32e:	84 23       	and	r24, r20
 330:	88 bb       	out	0x18, r24	; 24
		break;
 332:	08 95       	ret
		
		case 2:
		CLR_BIT (PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 334:	45 b3       	in	r20, 0x15	; 21
 336:	21 e0       	ldi	r18, 0x01	; 1
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	b9 01       	movw	r22, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_WRITE_CHANNEL+0xe4>
 33e:	66 0f       	add	r22, r22
 340:	77 1f       	adc	r23, r23
 342:	8a 95       	dec	r24
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_WRITE_CHANNEL+0xe0>
 346:	cb 01       	movw	r24, r22
 348:	80 95       	com	r24
 34a:	84 23       	and	r24, r20
 34c:	85 bb       	out	0x15, r24	; 21
		break;
 34e:	08 95       	ret
		
		case 3:
		CLR_BIT (PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 350:	42 b3       	in	r20, 0x12	; 18
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	b9 01       	movw	r22, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_WRITE_CHANNEL+0x100>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	8a 95       	dec	r24
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_WRITE_CHANNEL+0xfc>
 362:	cb 01       	movw	r24, r22
 364:	80 95       	com	r24
 366:	84 23       	and	r24, r20
 368:	82 bb       	out	0x12, r24	; 18
 36a:	08 95       	ret

0000036c <PORT_Init>:
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Port=0 , Pin=0 , Dir=0 , Cnt=0 ;
	
	for (Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt ++)
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	7e c0       	rjmp	.+252    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	{
		Port = PORT_Initialization[Cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS;
 370:	e9 2f       	mov	r30, r25
 372:	f0 e0       	ldi	r31, 0x00	; 0
 374:	ee 0f       	add	r30, r30
 376:	ff 1f       	adc	r31, r31
 378:	e0 5a       	subi	r30, 0xA0	; 160
 37a:	ff 4f       	sbci	r31, 0xFF	; 255
 37c:	80 81       	ld	r24, Z
 37e:	28 2f       	mov	r18, r24
 380:	26 95       	lsr	r18
 382:	26 95       	lsr	r18
 384:	26 95       	lsr	r18
		Pin = PORT_Initialization[Cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS;
 386:	87 70       	andi	r24, 0x07	; 7
		Dir = PORT_Initialization[Cnt].PIN_DIR;
 388:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(Dir)
 38a:	33 23       	and	r19, r19
 38c:	b9 f1       	breq	.+110    	; 0x3fc <PORT_Init+0x90>
 38e:	31 30       	cpi	r19, 0x01	; 1
 390:	09 f0       	breq	.+2      	; 0x394 <PORT_Init+0x28>
 392:	6b c0       	rjmp	.+214    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
		{
			case PIN_OUTPUT:
			
			switch(Port)
 394:	21 30       	cpi	r18, 0x01	; 1
 396:	89 f0       	breq	.+34     	; 0x3ba <PORT_Init+0x4e>
 398:	28 f0       	brcs	.+10     	; 0x3a4 <PORT_Init+0x38>
 39a:	22 30       	cpi	r18, 0x02	; 2
 39c:	c9 f0       	breq	.+50     	; 0x3d0 <PORT_Init+0x64>
 39e:	23 30       	cpi	r18, 0x03	; 3
 3a0:	11 f1       	breq	.+68     	; 0x3e6 <PORT_Init+0x7a>
 3a2:	63 c0       	rjmp	.+198    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 3a4:	4a b3       	in	r20, 0x1a	; 26
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <PORT_Init+0x44>
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	8a 95       	dec	r24
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <PORT_Init+0x40>
 3b4:	24 2b       	or	r18, r20
 3b6:	2a bb       	out	0x1a, r18	; 26
				break;
 3b8:	58 c0       	rjmp	.+176    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 3ba:	47 b3       	in	r20, 0x17	; 23
 3bc:	21 e0       	ldi	r18, 0x01	; 1
 3be:	30 e0       	ldi	r19, 0x00	; 0
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <PORT_Init+0x5a>
 3c2:	22 0f       	add	r18, r18
 3c4:	33 1f       	adc	r19, r19
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <PORT_Init+0x56>
 3ca:	24 2b       	or	r18, r20
 3cc:	27 bb       	out	0x17, r18	; 23
				break;
 3ce:	4d c0       	rjmp	.+154    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 3d0:	44 b3       	in	r20, 0x14	; 20
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <PORT_Init+0x70>
 3d8:	22 0f       	add	r18, r18
 3da:	33 1f       	adc	r19, r19
 3dc:	8a 95       	dec	r24
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <PORT_Init+0x6c>
 3e0:	24 2b       	or	r18, r20
 3e2:	24 bb       	out	0x14, r18	; 20
				break;
 3e4:	42 c0       	rjmp	.+132    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 3e6:	41 b3       	in	r20, 0x11	; 17
 3e8:	21 e0       	ldi	r18, 0x01	; 1
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <PORT_Init+0x86>
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <PORT_Init+0x82>
 3f6:	24 2b       	or	r18, r20
 3f8:	21 bb       	out	0x11, r18	; 17
				break;
 3fa:	37 c0       	rjmp	.+110    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			}
			break;
			
			case PIN_INPUT:
			
			switch(Port)
 3fc:	21 30       	cpi	r18, 0x01	; 1
 3fe:	91 f0       	breq	.+36     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 400:	28 f0       	brcs	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	22 30       	cpi	r18, 0x02	; 2
 404:	d9 f0       	breq	.+54     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 406:	23 30       	cpi	r18, 0x03	; 3
 408:	29 f1       	breq	.+74     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 40a:	2f c0       	rjmp	.+94     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			{			
			
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 40c:	4a b3       	in	r20, 0x1a	; 26
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 414:	22 0f       	add	r18, r18
 416:	33 1f       	adc	r19, r19
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	20 95       	com	r18
 41e:	24 23       	and	r18, r20
 420:	2a bb       	out	0x1a, r18	; 26
				break;
 422:	23 c0       	rjmp	.+70     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 424:	47 b3       	in	r20, 0x17	; 23
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 42c:	22 0f       	add	r18, r18
 42e:	33 1f       	adc	r19, r19
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 434:	20 95       	com	r18
 436:	24 23       	and	r18, r20
 438:	27 bb       	out	0x17, r18	; 23
				break;
 43a:	17 c0       	rjmp	.+46     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 43c:	44 b3       	in	r20, 0x14	; 20
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 444:	22 0f       	add	r18, r18
 446:	33 1f       	adc	r19, r19
 448:	8a 95       	dec	r24
 44a:	e2 f7       	brpl	.-8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 44c:	20 95       	com	r18
 44e:	24 23       	and	r18, r20
 450:	24 bb       	out	0x14, r18	; 20
				break;
 452:	0b c0       	rjmp	.+22     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 454:	41 b3       	in	r20, 0x11	; 17
 456:	21 e0       	ldi	r18, 0x01	; 1
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	02 c0       	rjmp	.+4      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	8a 95       	dec	r24
 462:	e2 f7       	brpl	.-8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 464:	20 95       	com	r18
 466:	24 23       	and	r18, r20
 468:	21 bb       	out	0x11, r18	; 17
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Port=0 , Pin=0 , Dir=0 , Cnt=0 ;
	
	for (Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt ++)
 46a:	9f 5f       	subi	r25, 0xFF	; 255
 46c:	99 30       	cpi	r25, 0x09	; 9
 46e:	08 f4       	brcc	.+2      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 470:	7f cf       	rjmp	.-258    	; 0x370 <PORT_Init+0x4>
				break;
		}
		break;
	}
}
}
 472:	08 95       	ret

00000474 <_exit>:
 474:	f8 94       	cli

00000476 <__stop_program>:
 476:	ff cf       	rjmp	.-2      	; 0x476 <__stop_program>
