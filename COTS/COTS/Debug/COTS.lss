
COTS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000328  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e22  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000977  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000749  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  000023d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f6  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000777  00000000  00000000  000029e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00003159  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

int main(void)
{
	
uint8 VALUE = 0;
PORT_Init();
  82:	0e 94 0e 01 	call	0x21c	; 0x21c <PORT_Init>

   while (1)
   {
	   
	   VALUE = BUTTON_GETVALUE(BTN_1);
  86:	8a e1       	ldi	r24, 0x1A	; 26
  88:	0e 94 5c 00 	call	0xb8	; 0xb8 <BUTTON_GETVALUE>
	   if(VALUE == 1)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	19 f4       	brne	.+6      	; 0x96 <main+0x14>
	   {
		   LED_Toggle(LED_GREEN);
  90:	81 e1       	ldi	r24, 0x11	; 17
  92:	0e 94 83 00 	call	0x106	; 0x106 <LED_Toggle>
	   }
	   
	   VALUE = BUTTON_GETVALUE(BTN_2);
  96:	8b e1       	ldi	r24, 0x1B	; 27
  98:	0e 94 5c 00 	call	0xb8	; 0xb8 <BUTTON_GETVALUE>
	   if(VALUE == 1)
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	19 f4       	brne	.+6      	; 0xa6 <main+0x24>
	   {
		   LED_Toggle(LED_BLUE);
  a0:	82 e1       	ldi	r24, 0x12	; 18
  a2:	0e 94 83 00 	call	0x106	; 0x106 <LED_Toggle>
	   }
	    VALUE = BUTTON_GETVALUE(BTN_3);
  a6:	8c e1       	ldi	r24, 0x1C	; 28
  a8:	0e 94 5c 00 	call	0xb8	; 0xb8 <BUTTON_GETVALUE>
	    if(VALUE == 1)
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	59 f7       	brne	.-42     	; 0x86 <main+0x4>
	    {
		    LED_Toggle(LED_RED);
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	0e 94 83 00 	call	0x106	; 0x106 <LED_Toggle>
  b6:	e7 cf       	rjmp	.-50     	; 0x86 <main+0x4>

000000b8 <BUTTON_GETVALUE>:
* \Parameters (out): None                                                      
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
uint8 BUTTON_GETVALUE(uint8 BTN_NUM)
{
  b8:	1f 93       	push	r17
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	00 d0       	rcall	.+0      	; 0xc0 <BUTTON_GETVALUE+0x8>
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	18 2f       	mov	r17, r24
	uint8 button = 1 ,temp = 0;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	1a 82       	std	Y+2, r1	; 0x02
	DIO_READ_CHANNEL(BTN_NUM , &button);
  cc:	be 01       	movw	r22, r28
  ce:	6f 5f       	subi	r22, 0xFF	; 255
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	81 2f       	mov	r24, r17
  d4:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_READ_CHANNEL>
		while (temp==0)
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <BUTTON_GETVALUE+0x2e>
		{
			DIO_READ_CHANNEL(BTN_NUM , &temp);
  da:	be 01       	movw	r22, r28
  dc:	6e 5f       	subi	r22, 0xFE	; 254
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	81 2f       	mov	r24, r17
  e2:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_READ_CHANNEL>
*******************************************************************************/
uint8 BUTTON_GETVALUE(uint8 BTN_NUM)
{
	uint8 button = 1 ,temp = 0;
	DIO_READ_CHANNEL(BTN_NUM , &button);
		while (temp==0)
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	88 23       	and	r24, r24
  ea:	b9 f3       	breq	.-18     	; 0xda <BUTTON_GETVALUE+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	83 ec       	ldi	r24, 0xC3	; 195
  ee:	99 e0       	ldi	r25, 0x09	; 9
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <BUTTON_GETVALUE+0x38>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <BUTTON_GETVALUE+0x3e>
  f6:	00 00       	nop
		{
			DIO_READ_CHANNEL(BTN_NUM , &temp);
		}
		_delay_ms(10);
		return button;
}
  f8:	89 81       	ldd	r24, Y+1	; 0x01
  fa:	0f 90       	pop	r0
  fc:	0f 90       	pop	r0
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	1f 91       	pop	r17
 104:	08 95       	ret

00000106 <LED_Toggle>:
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK
*******************************************************************************/
void LED_Toggle(uint8 LED_NUM)
{
	DIO_TOGGLE_CHANNEL(LED_NUM);
 106:	0e 94 cd 00 	call	0x19a	; 0x19a <DIO_TOGGLE_CHANNEL>
 10a:	83 ec       	ldi	r24, 0xC3	; 195
 10c:	99 e0       	ldi	r25, 0x09	; 9
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <LED_Toggle+0x8>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LED_Toggle+0xe>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <DIO_READ_CHANNEL>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_READ_CHANNEL (uint8 PIN_NUM , uint8 * PIN_VALUE)
{
	uint8 PORT = 0 , PIN = 0;
	PORT = PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
 118:	98 2f       	mov	r25, r24
 11a:	96 95       	lsr	r25
 11c:	96 95       	lsr	r25
 11e:	96 95       	lsr	r25
	PIN = PIN_NUM % NUMBER_OF_EACH_PORT_PINS ;
 120:	87 70       	andi	r24, 0x07	; 7
	
	switch(PORT)
 122:	91 30       	cpi	r25, 0x01	; 1
 124:	99 f0       	breq	.+38     	; 0x14c <DIO_READ_CHANNEL+0x34>
 126:	28 f0       	brcs	.+10     	; 0x132 <DIO_READ_CHANNEL+0x1a>
 128:	92 30       	cpi	r25, 0x02	; 2
 12a:	e9 f0       	breq	.+58     	; 0x166 <DIO_READ_CHANNEL+0x4e>
 12c:	93 30       	cpi	r25, 0x03	; 3
 12e:	41 f1       	breq	.+80     	; 0x180 <DIO_READ_CHANNEL+0x68>
 130:	08 95       	ret
	{
	case 0:
	*PIN_VALUE = GET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) , PIN);
 132:	29 b3       	in	r18, 0x19	; 25
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	a9 01       	movw	r20, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_READ_CHANNEL+0x26>
 13a:	55 95       	asr	r21
 13c:	47 95       	ror	r20
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_READ_CHANNEL+0x22>
 142:	ca 01       	movw	r24, r20
 144:	81 70       	andi	r24, 0x01	; 1
 146:	fb 01       	movw	r30, r22
 148:	80 83       	st	Z, r24
	break;
 14a:	08 95       	ret
	
	case 1:
	*PIN_VALUE = GET_BIT (PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) , PIN);
 14c:	26 b3       	in	r18, 0x16	; 22
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	a9 01       	movw	r20, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_READ_CHANNEL+0x40>
 154:	55 95       	asr	r21
 156:	47 95       	ror	r20
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_READ_CHANNEL+0x3c>
 15c:	ca 01       	movw	r24, r20
 15e:	81 70       	andi	r24, 0x01	; 1
 160:	fb 01       	movw	r30, r22
 162:	80 83       	st	Z, r24
	break;
 164:	08 95       	ret
	
	case 2:
	*PIN_VALUE = GET_BIT (PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) , PIN);
 166:	23 b3       	in	r18, 0x13	; 19
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	a9 01       	movw	r20, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_READ_CHANNEL+0x5a>
 16e:	55 95       	asr	r21
 170:	47 95       	ror	r20
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_READ_CHANNEL+0x56>
 176:	ca 01       	movw	r24, r20
 178:	81 70       	andi	r24, 0x01	; 1
 17a:	fb 01       	movw	r30, r22
 17c:	80 83       	st	Z, r24
	break;
 17e:	08 95       	ret
	
	case 3:
	*PIN_VALUE = GET_BIT (PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_INPUT_REGISTER_PIN) , PIN);
 180:	20 b3       	in	r18, 0x10	; 16
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	a9 01       	movw	r20, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_READ_CHANNEL+0x74>
 188:	55 95       	asr	r21
 18a:	47 95       	ror	r20
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_READ_CHANNEL+0x70>
 190:	ca 01       	movw	r24, r20
 192:	81 70       	andi	r24, 0x01	; 1
 194:	fb 01       	movw	r30, r22
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

0000019a <DIO_TOGGLE_CHANNEL>:
*                                    E_NOT_OK
*******************************************************************************/
void DIO_TOGGLE_CHANNEL (uint8 PIN_NUM)
{
	uint8 PORT = 0 , PIN = 0;
	PORT = PIN_NUM / NUMBER_OF_EACH_PORT_PINS ;
 19a:	98 2f       	mov	r25, r24
 19c:	96 95       	lsr	r25
 19e:	96 95       	lsr	r25
 1a0:	96 95       	lsr	r25
	PIN = PIN_NUM % NUMBER_OF_EACH_PORT_PINS ;
 1a2:	87 70       	andi	r24, 0x07	; 7
	
	switch(PORT)
 1a4:	91 30       	cpi	r25, 0x01	; 1
 1a6:	99 f0       	breq	.+38     	; 0x1ce <DIO_TOGGLE_CHANNEL+0x34>
 1a8:	28 f0       	brcs	.+10     	; 0x1b4 <DIO_TOGGLE_CHANNEL+0x1a>
 1aa:	92 30       	cpi	r25, 0x02	; 2
 1ac:	e9 f0       	breq	.+58     	; 0x1e8 <DIO_TOGGLE_CHANNEL+0x4e>
 1ae:	93 30       	cpi	r25, 0x03	; 3
 1b0:	41 f1       	breq	.+80     	; 0x202 <DIO_TOGGLE_CHANNEL+0x68>
 1b2:	08 95       	ret
	{
		case 0:
		Toggle_BIT (PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 1b4:	4b b3       	in	r20, 0x1b	; 27
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_TOGGLE_CHANNEL+0x28>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_TOGGLE_CHANNEL+0x24>
 1c6:	cb 01       	movw	r24, r22
 1c8:	84 27       	eor	r24, r20
 1ca:	8b bb       	out	0x1b, r24	; 27
		break;
 1cc:	08 95       	ret
		
		case 1:
		Toggle_BIT (PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 1ce:	48 b3       	in	r20, 0x18	; 24
 1d0:	21 e0       	ldi	r18, 0x01	; 1
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <DIO_TOGGLE_CHANNEL+0x42>
 1d8:	66 0f       	add	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	8a 95       	dec	r24
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <DIO_TOGGLE_CHANNEL+0x3e>
 1e0:	cb 01       	movw	r24, r22
 1e2:	84 27       	eor	r24, r20
 1e4:	88 bb       	out	0x18, r24	; 24
		break;
 1e6:	08 95       	ret
		
		case 2:
		Toggle_BIT (PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 1e8:	45 b3       	in	r20, 0x15	; 21
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_TOGGLE_CHANNEL+0x5c>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_TOGGLE_CHANNEL+0x58>
 1fa:	cb 01       	movw	r24, r22
 1fc:	84 27       	eor	r24, r20
 1fe:	85 bb       	out	0x15, r24	; 21
		break;
 200:	08 95       	ret
		
		case 3:
		Toggle_BIT (PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_OUTPUT_REGISTER_PORT) , PIN);
 202:	42 b3       	in	r20, 0x12	; 18
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_TOGGLE_CHANNEL+0x76>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_TOGGLE_CHANNEL+0x72>
 214:	cb 01       	movw	r24, r22
 216:	84 27       	eor	r24, r20
 218:	82 bb       	out	0x12, r24	; 18
 21a:	08 95       	ret

0000021c <PORT_Init>:
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Port=0 , Pin=0 , Dir=0 , Cnt=0 ;
	
	for (Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt ++)
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	7e c0       	rjmp	.+252    	; 0x31c <PORT_Init+0x100>
	{
		Port = PORT_Initialization[Cnt].PIN_NUM / NUMBER_OF_EACH_PORT_PINS;
 220:	e8 2f       	mov	r30, r24
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	e0 5a       	subi	r30, 0xA0	; 160
 22a:	ff 4f       	sbci	r31, 0xFF	; 255
 22c:	90 81       	ld	r25, Z
 22e:	29 2f       	mov	r18, r25
 230:	26 95       	lsr	r18
 232:	26 95       	lsr	r18
 234:	26 95       	lsr	r18
		Pin = PORT_Initialization[Cnt].PIN_NUM % NUMBER_OF_EACH_PORT_PINS;
 236:	97 70       	andi	r25, 0x07	; 7
		Dir = PORT_Initialization[Cnt].PIN_DIR;
 238:	31 81       	ldd	r19, Z+1	; 0x01
		
		switch(Dir)
 23a:	33 23       	and	r19, r19
 23c:	b9 f1       	breq	.+110    	; 0x2ac <PORT_Init+0x90>
 23e:	31 30       	cpi	r19, 0x01	; 1
 240:	09 f0       	breq	.+2      	; 0x244 <PORT_Init+0x28>
 242:	6b c0       	rjmp	.+214    	; 0x31a <PORT_Init+0xfe>
		{
			case PIN_OUTPUT:
			
			switch(Port)
 244:	21 30       	cpi	r18, 0x01	; 1
 246:	89 f0       	breq	.+34     	; 0x26a <PORT_Init+0x4e>
 248:	28 f0       	brcs	.+10     	; 0x254 <PORT_Init+0x38>
 24a:	22 30       	cpi	r18, 0x02	; 2
 24c:	c9 f0       	breq	.+50     	; 0x280 <PORT_Init+0x64>
 24e:	23 30       	cpi	r18, 0x03	; 3
 250:	11 f1       	breq	.+68     	; 0x296 <PORT_Init+0x7a>
 252:	63 c0       	rjmp	.+198    	; 0x31a <PORT_Init+0xfe>
			{
				case 0:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 254:	4a b3       	in	r20, 0x1a	; 26
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <PORT_Init+0x44>
 25c:	22 0f       	add	r18, r18
 25e:	33 1f       	adc	r19, r19
 260:	9a 95       	dec	r25
 262:	e2 f7       	brpl	.-8      	; 0x25c <PORT_Init+0x40>
 264:	24 2b       	or	r18, r20
 266:	2a bb       	out	0x1a, r18	; 26
				break;
 268:	58 c0       	rjmp	.+176    	; 0x31a <PORT_Init+0xfe>
				
				case 1:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 26a:	47 b3       	in	r20, 0x17	; 23
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	02 c0       	rjmp	.+4      	; 0x276 <PORT_Init+0x5a>
 272:	22 0f       	add	r18, r18
 274:	33 1f       	adc	r19, r19
 276:	9a 95       	dec	r25
 278:	e2 f7       	brpl	.-8      	; 0x272 <PORT_Init+0x56>
 27a:	24 2b       	or	r18, r20
 27c:	27 bb       	out	0x17, r18	; 23
				break;
 27e:	4d c0       	rjmp	.+154    	; 0x31a <PORT_Init+0xfe>
				
				case 2:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 280:	44 b3       	in	r20, 0x14	; 20
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <PORT_Init+0x70>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	9a 95       	dec	r25
 28e:	e2 f7       	brpl	.-8      	; 0x288 <PORT_Init+0x6c>
 290:	24 2b       	or	r18, r20
 292:	24 bb       	out	0x14, r18	; 20
				break;
 294:	42 c0       	rjmp	.+132    	; 0x31a <PORT_Init+0xfe>
				
				case 3:
				SET_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 296:	41 b3       	in	r20, 0x11	; 17
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <PORT_Init+0x86>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	9a 95       	dec	r25
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <PORT_Init+0x82>
 2a6:	24 2b       	or	r18, r20
 2a8:	21 bb       	out	0x11, r18	; 17
				break;
 2aa:	37 c0       	rjmp	.+110    	; 0x31a <PORT_Init+0xfe>
			}
			break;
			
			case PIN_INPUT:
			
			switch(Port)
 2ac:	21 30       	cpi	r18, 0x01	; 1
 2ae:	91 f0       	breq	.+36     	; 0x2d4 <PORT_Init+0xb8>
 2b0:	28 f0       	brcs	.+10     	; 0x2bc <PORT_Init+0xa0>
 2b2:	22 30       	cpi	r18, 0x02	; 2
 2b4:	d9 f0       	breq	.+54     	; 0x2ec <PORT_Init+0xd0>
 2b6:	23 30       	cpi	r18, 0x03	; 3
 2b8:	29 f1       	breq	.+74     	; 0x304 <PORT_Init+0xe8>
 2ba:	2f c0       	rjmp	.+94     	; 0x31a <PORT_Init+0xfe>
			{			
			
				case 0:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOA_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 2bc:	4a b3       	in	r20, 0x1a	; 26
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <PORT_Init+0xac>
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	9a 95       	dec	r25
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <PORT_Init+0xa8>
 2cc:	20 95       	com	r18
 2ce:	24 23       	and	r18, r20
 2d0:	2a bb       	out	0x1a, r18	; 26
				break;
 2d2:	23 c0       	rjmp	.+70     	; 0x31a <PORT_Init+0xfe>
				
				case 1:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOB_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 2d4:	47 b3       	in	r20, 0x17	; 23
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <PORT_Init+0xc4>
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	9a 95       	dec	r25
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <PORT_Init+0xc0>
 2e4:	20 95       	com	r18
 2e6:	24 23       	and	r18, r20
 2e8:	27 bb       	out	0x17, r18	; 23
				break;
 2ea:	17 c0       	rjmp	.+46     	; 0x31a <PORT_Init+0xfe>
				
				case 2:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOC_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 2ec:	44 b3       	in	r20, 0x14	; 20
 2ee:	21 e0       	ldi	r18, 0x01	; 1
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <PORT_Init+0xdc>
 2f4:	22 0f       	add	r18, r18
 2f6:	33 1f       	adc	r19, r19
 2f8:	9a 95       	dec	r25
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <PORT_Init+0xd8>
 2fc:	20 95       	com	r18
 2fe:	24 23       	and	r18, r20
 300:	24 bb       	out	0x14, r18	; 20
				break;
 302:	0b c0       	rjmp	.+22     	; 0x31a <PORT_Init+0xfe>
				
				case 3:
				CLR_BIT(PHYSICAL_GPIO_ACCESS(GPIOD_BASE_ADDRRESS + GPIO_DIRCETION_REGISTER_DDR) , Pin);
 304:	41 b3       	in	r20, 0x11	; 17
 306:	21 e0       	ldi	r18, 0x01	; 1
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <PORT_Init+0xf4>
 30c:	22 0f       	add	r18, r18
 30e:	33 1f       	adc	r19, r19
 310:	9a 95       	dec	r25
 312:	e2 f7       	brpl	.-8      	; 0x30c <PORT_Init+0xf0>
 314:	20 95       	com	r18
 316:	24 23       	and	r18, r20
 318:	21 bb       	out	0x11, r18	; 17
*******************************************************************************/
void PORT_Init(void)
{
	uint8 Port=0 , Pin=0 , Dir=0 , Cnt=0 ;
	
	for (Cnt = 0 ; Cnt < DEFINED_PINS ; Cnt ++)
 31a:	8f 5f       	subi	r24, 0xFF	; 255
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	08 f4       	brcc	.+2      	; 0x322 <PORT_Init+0x106>
 320:	7f cf       	rjmp	.-258    	; 0x220 <PORT_Init+0x4>
				break;
		}
		break;
	}
}
}
 322:	08 95       	ret

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
